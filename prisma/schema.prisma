generator client {
  provider = "prisma-client-py"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int   @id @default(autoincrement())
  email       String?  @unique
  phone       BigInt  @unique
  firstName   String
  lastName    String
  role        UserRole @default(CLIENT)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  password    String
  embeddedPref String?
  specialinfo Json?
  restaurantId Int?
  restaurant   Restaurant? @relation("RestaurantStaff", fields: [restaurantId], references: [id])
  orders       Order[]
  reviews      Review[]
  loyaltyCard  LoyaltyCard?
  address      Address? 
  reservations Reservation[]
  refreshTokens RefreshToken[]
  otpCodes     OtpCode[]
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  
  @@map("refresh_tokens")
}
model Address {
  id           Int  @id @default(autoincrement())
  userId       Int? @unique 
  user         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId Int? @unique 
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  street       String
  city         String
  latitude     Float?
  longitude    Float?
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  @@map("addresses")
}
enum UserRole {
  CLIENT
  WAITER
  CHEF
  MANAGER
  ADMIN
}
model Restaurant {
  id          Int @id @default(autoincrement())
  name        String
  description String?
  phone       String
  email       String?
  website     String?
  address     Address? @relation 
  isActive     Boolean    @default(true)
  operatingHours Json 
  logo        String?
  coverImage  String?
  gallery     String[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  staff       User[]     @relation("RestaurantStaff")
  menus       Menu[]
  tables      Table[]
  orders      Order[]
  reviews     Review[]
  promotions  Promotion[]
  inventory   Inventory[]
  reservations Reservation[]
  loyaltyTransactions LoyaltyTransaction[]
  @@map("restaurants")
}
model Menu {
  id           Int @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  isActive     Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  categories   MenuCategory[]
  @@map("menus")
}
model MenuCategory {
  id          Int @id @default(autoincrement())
  menuId      Int
  menu        Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  name        String
  description String?
  image       String?
  isActive    Boolean @default(true)
  displayOrder Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dishes      Dish[]
  @@map("menu_categories")
}
model Dish {
  id           Int @id @default(autoincrement())
  categoryId   Int
  category     MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name         String
  description  String
  price        Float
  image        String?
  gallery      String[] 
  isAvailable  Boolean @default(true)
  quantity Int
  preparationTime Int  
  popularity   Float @default(0) 
  displayOrder Int     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ingredients ingredient[]
  orderItems   OrderItem[]
  reviews      Review[]
  promotions   Promotion[] @relation("PromotionDishes")
  @@map("dishes")
}
model Table {
  id           Int @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  number       String     
  capacity     Int
  isActive     Boolean    @default(true)
  qrCode       String?    
  nfcTag       String?    
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reservations Reservation[]
  orders       Order[]
  @@unique([restaurantId, number])
  @@map("tables")
}

model Reservation {
  id           Int @id @default(autoincrement())
  userId       Int
  user         User              @relation(fields: [userId], references: [id])
  tableId      Int?
  table        Table?            @relation(fields: [tableId], references: [id])
  restaurantId Int
  restaurant   Restaurant        @relation(fields: [restaurantId], references: [id])
  reservationStart DateTime
  reservationEnd   DateTime
  status          ReservationStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("reservations")
}
enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
model Order {
  id           Int @id @default(autoincrement())
  orderNumber  String      @unique 
  userId       Int?
  user         User?       @relation(fields: [userId], references: [id])
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  tableId      Int?
  table        Table?      @relation(fields: [tableId], references: [id])
  type         OrderType   @default(DINE_IN)
  status       OrderStatus @default(PENDING)
  subtotal     Float
  deliveryFee  Float       @default(0)
  discount     Float       @default(0)
  totalAmount  Float
  deliveryAddressId Int?
  deliveryAddress   Address? @relation(fields: [deliveryAddressId], references: [id])
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?       
  notes        String?
  orderTime    DateTime @default(now())
  confirmedAt  DateTime?
  preparedAt   DateTime?
  readyAt      DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  items        OrderItem[]
  paymentId    Int?
  payment      Payments?
  @@map("orders")
}

model OrderItem {
  id          Int @id @default(autoincrement())
  orderId     Int
  order       Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dishId      Int
  dish        Dish   @relation(fields: [dishId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  notes       String? 
  createdAt   DateTime @default(now())
  @@map("order_items")
}
enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}
enum OrderStatus {
  PENDING      
  CONFIRMED    
  PREPARING    
  READY        
  OUT_FOR_DELIVERY 
  COMPLETED    
  CANCELLED    
}
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}


model LoyaltyCard {
  id           Int @id @default(autoincrement())
  userId       Int @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  points       Int    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  transactions LoyaltyTransaction[]
  @@map("loyalty_cards")
}
model LoyaltyTransaction {
  id            Int @id @default(autoincrement())
  loyaltyCardId Int
  loyaltyCard   LoyaltyCard @relation(fields: [loyaltyCardId], references: [id])
  restaurantId Int
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  points        Int         
  type          String      
  description   String
  createdAt     DateTime    @default(now())
  @@map("loyalty_transactions")
}


model Review {
  id           Int @id @default(autoincrement())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  dishId      Int?
  dish         Dish?      @relation(fields: [dishId], references: [id])
  rating       Int        
  comment      String?
  sentiment    String?    
  sentimentScore Float?   
  isVerified   Boolean    @default(false) 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@map("reviews")
}
model Promotion {
  id           Int @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  title        String
  description  String
  image        String?
  type         PromotionType
  discountType DiscountType
  discountValue Float      
  minOrderAmount Float?    
  startDate    DateTime
  endDate      DateTime
  maxUses      Int?       
  currentUses  Int        @default(0)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dishes       Dish[]     @relation("PromotionDishes")
  @@map("promotions")
}
enum PromotionType {
  DISCOUNT     
  BOGO         
  FREE_DELIVERY
  HAPPY_HOUR
  SEASONAL
}
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
model Inventory {
  id           Int @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  itemName     String
  description  String?
  unit         String     
  currentStock Float
  minStock     Float      
  maxStock     Float?     
  unitCost     Float?     
  supplier     String?
  supplierContact String?
  lastRestocked DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  relatedingredients ingredient[]
  @@unique([restaurantId, itemName])
  @@map("inventory")
}

model ingredient {
  id Int @id @default(autoincrement())
  dishId Int
  dish Dish @relation(fields: [dishId] , references: [id])
  InventoryId Int
  Inventoryrel Inventory @relation(fields: [InventoryId] , references: [id])
  quantity Float
}





enum InteractionType {
  VIEW
  LIKE
  SHARE
  ORDER
  REVIEW
  SEARCH
}

model Payments {
  id                Int      @id @default(autoincrement())
  paymentId         String   @unique // Payment gateway ID
  orderId           Int      @unique
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  
  @@map("payments")
}

model OtpCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  purpose   OtpPurpose
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("otp_codes")
}

enum OtpPurpose {
  STAFF_AUTH
  PAYMENT_CONFIRMATION
  PASSWORD_RESET
}